#include <stdint.h> // for uint64_t
#include <stdio.h>  // for snprintf()
#include <stdlib.h> // for exit()
#include <string.h> // for memset()
#include <sys/types.h>
#include <sys/uio.h>
#include <unistd.h> // for sbrk()

#define EXTRA_SIZE 256
#define BLOCK_SIZE 128
#define BUF_SIZE 128

extern void *sbrk(intptr_t increment);

struct header {
  uint64_t size;
  struct header *next;
};

void handle_error(const char *msg) {
  write(STDERR_FILENO, msg, strlen(msg));
  write(STDERR_FILENO, "\n", 1);
  exit(1);
}

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                          data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                        : *(void **)data);
  if (len < 0) {
    handle_error("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  // Step 1: Increase heap by 256 bytes
  void *heap_start = sbrk(EXTRA_SIZE);
  if (heap_start == (void *)-1) {
    handle_error("sbrk failed");
  }

  // Step 2: Divide space into two blocks
  void *block1_addr = heap_start;
  void *block2_addr = heap_start + BLOCK_SIZE;

  // Step 3: Create headers
  struct header *block1 = (struct header *)block1_addr;
  struct header *block2 = (struct header *)block2_addr;

  // Step 4: Initialize headers
  block1->size = BLOCK_SIZE;
  block1->next = NULL;

  block2->size = BLOCK_SIZE;
  block2->next = block1;

  // Step 5: Initialize data sections
  unsigned char *block1_data = (unsigned char *)(block1 + 1);
  unsigned char *block2_data = (unsigned char *)(block2 + 1);

  size_t data_size = BLOCK_SIZE - sizeof(struct header);

  memset(block1_data, 0, data_size);
  memset(block2_data, 1, data_size);

  // Step 6: Print info
  print_out("first block: %p\n", &block1_addr, sizeof(block1_addr));
  print_out("second block: %p\n", &block2_addr, sizeof(block2_addr));

  print_out("first block size: %lu\n", &block1->size, sizeof(block1->size));
  print_out("first block next: %p\n", &block1->next, sizeof(block1->next));

  print_out("second block size: %lu\n", &block2->size, sizeof(block2->size));
  print_out("second block next: %p\n", &block2->next, sizeof(block2->next));

  // Step 7: Print block data (values)
  for (size_t i = 0; i < data_size; i++) {
    print_out("%d\n", &block1_data[i], sizeof(block1_data[i]));
  }

  for (size_t i = 0; i < data_size; i++) {
    print_out("%d\n", &block2_data[i], sizeof(block2_data[i]));
  }

  return 0;
}
